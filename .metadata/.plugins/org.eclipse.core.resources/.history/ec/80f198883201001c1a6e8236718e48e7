package com.selenium.framework.libraries;
import static org.testng.Assert.assertTrue;
import java.sql.Timestamp;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.apache.log4j.Logger;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
public class extraLibrary {
	
	
	public class MyLibrary {
		final static Logger logger = Logger.getLogger(MyLibrary.class);
		public enum Browser {
			FIREFOX, CHROME, SAFARI, EDGE_CHROMIUM
		}
		private WebDriver driver;
		public WebDriver getDriver() {
			return driver;
		}
		public void setDriver(WebDriver _driver) {
			if (_driver != null) {
				this.driver = _driver;
			}
		}
		private int defaultWaitTimeInSecs = 30;
		// Constructor ----> special method where
		// 1) Method name is exactly same as the class name
		// 2) and no return type
		// Default Constructor - and all classes have this and it is hidden.
		public MyLibrary() {
		}
		// Custom Constructor
		public MyLibrary(WebDriver _driver) {
			driver = _driver;
		}
		public WebDriver startBrowser(Browser browser) {
			switch (browser) {
			case EDGE_CHROMIUM:
				driver = startEdgeChromiumBrowser();
				break;
			case CHROME:
				driver = startChromeBrowser();
				break;
			case SAFARI:
				driver = startSafariBrowser();
				break;
			case FIREFOX:
				driver = startFirefoxBrowser();
				break;
			default:
				logger.error("Currently we are not supporting this type of browser !");
				logger.error("Default browser set to Chrome");
				driver = startChromeBrowser();
				break;
			}
			return driver;
		}
		private WebDriver startEdgeChromiumBrowser() {
			logger.info("This method is not implemented yet! Start EdgeChromium");
			return driver;
		}
		private WebDriver startFirefoxBrowser() {
			logger.info("This method is not implemented yet! Start Firefox");
			return driver;
		}
		private WebDriver startSafariBrowser() {
			logger.info("This method is not implemented yet! Start Safari");
			return driver;
		}
		private WebDriver startChromeBrowser() {
			try {
				System.setProperty("webdriver.chrome.driver", "src/test/resources/drivers/chromedriver.exe");
				logger.info("starting 'Chrome' browser.");
				driver = new ChromeDriver();
				driver.manage().deleteAllCookies();
				setWebsiteWaits();
			} catch (Exception e) {
				logger.error("Error: ", e);
				assertTrue(false);
			}
			return driver;
		}
		private void setWebsiteWaits() {
			try {
				driver.manage().timeouts().implicitlyWait(defaultWaitTimeInSecs, TimeUnit.SECONDS);
				driver.manage().timeouts().pageLoadTimeout(defaultWaitTimeInSecs, TimeUnit.SECONDS);
				logger.info("Maximaizing the Browser");
				driver.manage().window().maximize();
			} catch (Exception e) {
				logger.error("Error: ", e);
				assertTrue(false);
			}
		}
		public void enterText(By by, String inputText) {
			try {
				WebElement element = driver.findElement(by);
				element.clear();
				element.sendKeys(inputText);
			} catch (Exception e) {
				logger.error("Error: ", e);
				assertTrue(false);
			}
		}
		public void selectDropDown(By by, String visibleTextOption) {
			try {
				Select tempSelect = selectDropDown(by);
				tempSelect.selectByVisibleText(visibleTextOption);
			} catch (Exception e) {
				logger.error("Error: ", e);
			}
		}
		public void selectDropDown2(By by, String valueOption) {
			try {
				Select tempSelect2 = selectDropDown(by);
				tempSelect2.selectByValue(valueOption);
			} catch (Exception e) {
				logger.error("Error: ", e);
			}
		}
		public Select selectDropDown(By by) {
			Select selectDropdown = null;
			try {
				WebElement element = driver.findElement(by);
				selectDropdown = new Select(element);
			} catch (Exception e) {
				logger.error("Error: ", e);
				assertTrue(false);
			}
			return selectDropdown;
		}
		public void clickButton(By by) {
			try {
				WebElement element = driver.findElement(by);
				element.click();
			} catch (Exception e) {
				logger.error("Error: ", e);
				assertTrue(false);
			}
		}
		public void clickButton(WebElement element) {
			try {
				element.click();
			} catch (Exception e) {
				logger.error("Error: ", e);
				assertTrue(false);
			}
		}
		public void clickHiddenElement(By by) {
			try {
				WebElement element = driver.findElement(by);
				JavascriptExecutor js = (JavascriptExecutor) driver;
				js.executeScript("arguments[0].click();", element);
			} catch (Exception e) {
				logger.error("Error: ", e);
				assertTrue(false);
			}
		}
		public WebElement dynamicWaitForVisibilityOfElement(By by) {
			WebElement element = null;
			try {
				WebDriverWait wait = new WebDriverWait(driver, defaultWaitTimeInSecs);
				element = wait.until(ExpectedConditions.visibilityOfElementLocated(by));
			} catch (Exception e) {
				logger.error("Error: ", e);
				assertTrue(false);
			}
			return element;
		}
		public void moveToElement(By by) {
			try {
				WebElement element = driver.findElement(by);
				Actions action = new Actions(driver);
				action.moveToElement(element).build().perform();
				customWait(0.5);
			} catch (Exception e) {
				logger.error("Error: ", e);
				assertTrue(false);
			}
		}
		/***
		 * This method scrolls screen up for negative pixels and scrolls screen down for
		 * positive pixels parameter
		 *
		 * @param pixels
		 */
		public void scrollUpDown(int pixels) {
			try {
				JavascriptExecutor js = (JavascriptExecutor) driver;
				js.executeScript("scroll(0," + pixels + ")");
			} catch (Exception e) {
				logger.error("Error: ", e);
				assertTrue(false);
			}
		}
		public String getCurrentTime() {
			String finalTime = null;
			try {
				Date date = new Date();
				logger.debug("time1: " + date.toString());
				String tempTime = new Timestamp(date.getTime()).toString();
				logger.debug("time2: " + tempTime);
				finalTime = tempTime.replace("-", "").replace(" ", "").replace(":", "").replace(".", "");
				logger.debug("time3: " + finalTime);
			} catch (Exception e) {
				logger.error("Error: ", e);
				assertTrue(false);
			}
			return finalTime;
		}
		/*
		 * public static void main(String[] args) { getCurrentTime(); }
		 */
		public void customWait(double inSeconds) {
			try {
				Thread.sleep((long) (inSeconds * 1000));
			} catch (Exception e) {
				logger.error("Error: ", e);
				assertTrue(false);
			}
		}
		public void dragAndDrop(By by, int xOffset, int yOffset) {
			try {
				WebElement element = driver.findElement(by);
				Actions action = new Actions(driver);
				action.dragAndDropBy(element, xOffset, yOffset).perform();
				customWait(0.5);
			} catch (Exception e) {
				logger.error("Error: ", e);
				assertTrue(true);
			}
		}
		public void dragAndDrop(By fromElemet1, By toElement2) {
			try {
				Actions action = new Actions(driver);
				WebElement element1 = driver.findElement(fromElemet1);
				WebElement element2 = driver.findElement(toElement2);
				action.dragAndDrop(element1, element2).perform();
				customWait(0.5);
			} catch (Exception e) {
				logger.error("Error: ", e);
				assertTrue(true);
			}
		}
	}


}
